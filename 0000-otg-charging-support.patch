From aba05823fd0ccc0921a8e4579a31866e16cff129 Mon Sep 17 00:00:00 2001
From: ShadowEO <dreamcaster23@gmail.com>
Date: Fri, 17 Nov 2017 19:04:12 -0500
Subject: [PATCH] USB OTG Charging: Added OTG Charging from flar2 by hand,
 since cherrypicking it didn\'t work right last time I tried...


diff --git a/drivers/power/bq27541_battery.c b/drivers/power/bq27541_battery.c
index 7aaffcd..0bc7d33 100644
--- a/drivers/power/bq27541_battery.c
+++ b/drivers/power/bq27541_battery.c
@@ -613,7 +613,8 @@ static int bq27541_get_psp(int reg_offset, enum power_supply_property psp,
 	if (psp == POWER_SUPPLY_PROP_STATUS) {
 		ret = bq27541_device->bat_status = rt_value;
 
-		if ((ac_on || usb_on || wireless_on) && !otg_on) {/* Charging detected */
+		//otg+charge - allow chargine while otg - credit flar2
+		if ((ac_on || usb_on || wireless_on) /* && !otg_on*/) {/* Charging detected */
 			if (bq27541_device->old_capacity == 100) {
 				val->intval = POWER_SUPPLY_STATUS_FULL;
 			} else {
diff --git a/drivers/usb/otg/msm_otg.c b/drivers/usb/otg/msm_otg.c
index 4d094f2..2332bd6 100755
--- a/drivers/usb/otg/msm_otg.c
+++ b/drivers/usb/otg/msm_otg.c
@@ -98,6 +98,10 @@ static struct workqueue_struct *msm_otg_id_pin_wq;
 static int global_vbus_suspend_status;
 static int global_id_pin_suspend_status;
 
+//otg+charge: sysfs entry - credit to flar2
+static bool usbhost_charge_mode = false;
+module_param(usbhost_charge_mode, bool, 0755);
+
 /* APQ8064 GPIO pin definition */
 #define APQ_AP_ACOK	23
 #define APQ_OTG_ID_PIN	77
@@ -1135,8 +1139,9 @@ static int msm_otg_notify_host_mode(struct msm_otg *motg, bool host_mode)
 
 	if (!psy)
 		goto psy_not_supported;
-
-	if (host_mode) {
+	//otg+charge: need to set POWER_SUPPLY_SCOPE_DEVICE or else it doesn't
+	//detect vbus
+	if (host_mode && !usbhost_charge_mode) {
 		ret = power_supply_set_scope(psy, POWER_SUPPLY_SCOPE_SYSTEM);
 	} else {
 		ret = power_supply_set_scope(psy, POWER_SUPPLY_SCOPE_DEVICE);
@@ -1281,6 +1286,13 @@ static void msm_otg_start_host(struct usb_otg *otg, int on)
 		dev_dbg(otg->phy->dev, "host on\n");
 		smb345_otg_status(true);
 		otg_host_on = 1;
+		
+		//otg+charge: don't use battery to power peripheral in host mode - credit flar2
+		if (usbhost_charge_mode)
+			smb345_otg_status(false);
+		else
+			smb345_otg_status(true);
+		otg_host_on = 1;
 
 		// Reset to apply new parameter for host.
 		msm_otg_reset(otg->phy);
@@ -1395,6 +1407,13 @@ static void msm_hsusb_vbus_power(struct msm_otg *motg, bool on)
 	int ret;
 	static bool vbus_is_on;
 
+	//otg+charge: just to be safe, turn off battery power to otg peripheral - credit flar2
+	if (usbhost_charge_mode) {
+		printk("[usbhost_charge_mode]: Do not supply power in host mode\n");
+		msm_otg_notify_host_mode(motg, on);
+		return;
+	}
+
 	if (vbus_is_on == on)
 		return;
 
@@ -2257,9 +2276,18 @@ static void msm_chg_detect_work(struct work_struct *w)
 			}
 
 			if (line_state) { /* DP > VLGC or/and DM > VLGC */
-				motg->chg_type = USB_PROPRIETARY_CHARGER;
-			else
+			//	motg->chg_type = USB_PROPRIETARY_CHARGER;
+			//else
+			//	motg->chg_type = USB_SDP_CHARGER;
+			//otg+charge - credit flar2
+				if (usbhost_charge_mode) {
+					motg->chg_type = USB_ACA_A_CHARGER;
+				} else {
+					motg->chg_type = USB_PROPRIETARY_CHARGER;
+				}
+			} else {
 				motg->chg_type = USB_SDP_CHARGER;
+			}
 
 			motg->chg_state = USB_CHG_STATE_DETECTED;
 			delay = 0;
@@ -2765,6 +2793,15 @@ static void msm_otg_sm_work(struct work_struct *w)
 		} else if (test_bit(ID_A, &motg->inputs)) {
 			msm_hsusb_vbus_power(motg, 0);
 		} else if (!test_bit(A_BUS_REQ, &motg->inputs)) {
+			if (usbhost_charge_mode) {
+				if (test_bit(B_SESS_VLD, &motg->inputs)) {
+					pr_debug("b_sess_vld\n");
+					usleep_range(10000, 12000);
+					if (motg->chg_state == USB_CHG_STATE_UNDEFINED)
+						msm_chg_detect_work(&motg->chg_work.work);
+				}
+			}
+
 			/*
 			 * If TA_WAIT_BCON is infinite, we don;t
 			 * turn off VBUS. Enter low power mode.
@@ -3120,15 +3157,33 @@ static void msm_otg_set_vbus_state(int online)
 	struct usb_otg *otg = motg->phy.otg;
 
 	/* In A Host Mode, ignore received BSV interrupts */
-	if (otg->phy->state >= OTG_STATE_A_IDLE)
+	//if (otg->phy->state >= OTG_STATE_A_IDLE)
+	//	return;
+	//otg+charge: ignore unless usbhost_charge_mode, then we want to sense vbus - credit flar2
+	if (!usbhost_charge_mode && otg->phy->state >= OTG_STATE_A_IDLE)
 		return;
 
 	if (online) {
 		pr_debug("PMIC: BSV set\n");
 		set_bit(B_SESS_VLD, &motg->inputs);
+		if (otg->phy->state >= OTG_STATE_A_IDLE && usbhost_charge_mode) {
+			printk("[usbhost_charge_mode]: already in host mode, restart chg_work");
+			msm_chg_detect_work(&motg->chg_work.work);
+		}
+
 	} else {
 		pr_debug("PMIC: BSV clear\n");
 		clear_bit(B_SESS_VLD, &motg->inputs);
+
+		//otg+charge: cancel charging when power is disconnected
+		if (otg->phy->state >= OTG_STATE_A_IDLE && usbhost_charge_mode) {
+			printk("[usbhost_charge_mode]: chg_work cancel from vbus state");
+			cancel_delayed_work_sync(&motg->chg_work);
+			motg->chg_state = USB_CHG_STATE_UNDEFINED;
+			motg->chg_type = USB_INVALID_CHARGER;
+			asus_chg_set_chg_mode(USB_INVALID_CHARGER);
+			msm_otg_notify_charger(motg, 0);
+		}
 	}
 
 	if (!init) {
@@ -3174,6 +3229,9 @@ static void id_pin_irq_work_function(struct work_struct *work)
 	else {
 		pr_debug("%s: gpio_get_value(APQ_OTG_ID_PIN) = %d\n", __func__, gpio_get_value(APQ_OTG_ID_PIN));
 		if (gpio == 0 && otg_host_on == 0) {
+			//otg+charge: this needs a slight delay or else it doesn't start charging - credit flar2
+			if (usbhost_charge_mode)
+				msleep(40);
 			pr_info("%s: APQ_OTG_ID_PIN is low : Host mode\n", __func__);
 			set_bit(A_BUS_REQ, &motg->inputs);
 			clear_bit(ID, &motg->inputs);
